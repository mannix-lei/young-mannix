{"version":3,"sources":["view/login/Login.module.scss","view/common/header/Header.module.scss","view/common/header/Header.tsx","view/common/Auth.tsx","service/login.ts","utils/validators.ts","view/login/Login.tsx","view/pages/songs-form/songs-form.tsx","PrivateRoute.tsx","service/index.ts","service/songs.ts","view/pages/songs-list/Songs-List.tsx","view/pages/songs-list/columns.tsx","view/home/Home.tsx","view/sign-up/sign-up.tsx","App.tsx","serviceWorker.ts","redux/modules/songs.ts","redux/modules/user.ts","redux/index.ts","index.tsx"],"names":["module","exports","menuType","AuthContext","createContext","authTokens","setAuthTokens","data","useAuth","useContext","login","name","password","remember","a","token","validEmail","type","message","layout","labelCol","span","Login","props","Form","useForm","form","useState","isLoggedIn","setLoggedIn","referer","location","state","setFieldsValue","email","localStorage","getItem","onFinish","values","setItem","to","pathname","className","style","body","config","count","zIndex","title","bordered","initialValues","store","Item","label","rules","required","Password","valuePropName","htmlType","wrapperCol","SongsForm","setkeyword","placeholder","onPressEnter","event","currentTarget","value","Header","Layout","Content","Footer","HeaderLayout","avator","theme","mode","defaultSelectedKeys","最新音乐","key","歌单","flexGrow","marginLeft","marginTop","backgroundColor","icon","UserOutlined","padding","background","children","textAlign","PrivateRoute","Component","rest","render","instance","Axios","create","baseURL","withCredentials","interceptors","request","use","err","Promise","reject","response","status","notification","error","statusText","getSongsList","provider","keyword","page","service","get","params","playSong","platform","id","SongsList","list","setlist","total","settotal","currentSongUrl","setcurrentSongUrl","meted","initList","songs","totalCount","useEffect","columns","play","dataIndex","text","record","href","link","target","_text","artists","map","item","color","length","album","display","justifyContent","fontSize","PlayCircleOutlined","onClick","originalId","DownloadOutlined","songsColumn","songSource","dataSource","pagination","onChange","showSizeChanger","src","autoPlay","controls","muted","Home","SignUp","App","existingTokens","JSON","parse","Provider","stringify","exact","path","component","Boolean","window","hostname","match","initState","songsList","loading","username","rootReducer","combineReducers","user","action","payload","song","createStore","applyMiddleware","thunk","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.c3b41511.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"body\":\"Login_body__3ED08\",\"login\":\"Login_login__29f7P\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"layout\":\"Header_layout__LeZNa\",\"avator\":\"Header_avator__nvnhF\"};","import React, { FC, ReactNode } from 'react';\nimport { Layout, Menu, Avatar } from 'antd';\nimport { UserOutlined } from '@ant-design/icons';\nimport style from './Header.module.scss';\nimport SongsForm from '../../pages/songs-form/songs-form';\n\nconst { Header, Content, Footer } = Layout;\n\nexport enum menuType {\n    歌单 = 'songs-list',\n    最新音乐 = 'latest-list',\n}\n\ninterface IProps {\n    children?: ReactNode;\n}\nconst HeaderLayout: FC = (props: IProps) => {\n    return (\n        <Layout className={style.layout}>\n            <Header>\n                <div className={style.avator}></div>\n                <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={[menuType.最新音乐]}>\n                    <Menu.Item key={menuType.最新音乐}>最新音乐</Menu.Item>\n                    <Menu.Item key={menuType.歌单}>歌单</Menu.Item>\n                </Menu>\n                <SongsForm style={{ flexGrow: 0.6, marginLeft: '50px', marginTop: '15px' }}/>\n                <Avatar style={{ backgroundColor: '#87d068', marginTop: '15px' }} icon={<UserOutlined />} />\n            </Header>\n            <Content style={{ padding: '24px 50px', background: '#fff' }}>\n                {/* <Breadcrumb style={{ margin: '16px 0' }}>\n                    <Breadcrumb.Item>Home</Breadcrumb.Item>\n                    <Breadcrumb.Item>List</Breadcrumb.Item>\n                    <Breadcrumb.Item>App</Breadcrumb.Item>\n                </Breadcrumb> */}\n                <div className=\"site-layout-content\">\n                    {props.children}\n                </div>\n            </Content>\n            <Footer style={{ textAlign: 'center' }}>Young Mannix ©2020 Created by Mannix Lei</Footer>\n        </Layout>\n    );\n};\n\nexport default HeaderLayout;\n","import { createContext, useContext } from 'react';\n\nexport const AuthContext = createContext<{ authTokens: any; setAuthTokens: (data: object) => void }>({\n    authTokens: '',\n    setAuthTokens: (data: object) => {\n        return data;\n    },\n});\nexport const useAuth = () => {\n    return useContext(AuthContext);\n};\n","import service from './index';\n\n/**\n * login\n * @param name\n * @param password\n */\nexport const login = async (name: string, password: string, remember: boolean) => {\n    // return service.post('/login', { name, password, remember });\n    return {\n        token: '234234234',\n    };\n};\n","import { Rule } from 'antd/lib/form';\n\nexport const validEmail: Rule = {\n    type: 'email',\n    message: 'please input correct email',\n};\n","import React, { FC, useState } from 'react';\nimport { useAuth } from '../common/Auth';\nimport { Redirect } from 'react-router';\nimport { Card, Form, Input, Checkbox, Button } from 'antd';\nimport style from './Login.module.scss';\nimport ReactCanvasNest from 'react-canvas-nest';\nimport { login } from '../../service/login';\nimport { validEmail } from '../../utils/validators';\n\nconst layout = {\n    labelCol: { span: 5 },\n};\ninterface IProps {\n    [x: string]: any;\n}\nconst Login: FC = (props: IProps) => {\n    const [form] = Form.useForm();\n    const [isLoggedIn, setLoggedIn] = useState(false);\n    const { setAuthTokens } = useAuth();\n    const referer = ((props.location || {}).state || {}).referer || '/';\n\n    form.setFieldsValue({ email: localStorage.getItem('email'), password: localStorage.getItem('password') });\n\n    const onFinish = async (values: { email: string; password: string; remember: boolean }) => {\n        if (values.remember) {\n            localStorage.setItem('email', values.email);\n            localStorage.setItem('password', values.password);\n        } else {\n            localStorage.setItem('email', '');\n            localStorage.setItem('password', '');\n        }\n        const { token } = await login(values.email, values.password, values.remember);\n        setAuthTokens({ token });\n        setLoggedIn(true);\n    };\n\n    if (isLoggedIn) {\n        return <Redirect to={referer.pathname || '/list'} />;\n    }\n\n    return (\n        <div className={style.body}>\n            <ReactCanvasNest config={{ count: 50 }} style={{ zIndex: 0 }} />\n            <Card title=\"Login\" bordered={false} className={style.login}>\n                <Form\n                    {...layout}\n                    form={form}\n                    name=\"basic\"\n                    initialValues={{ remember: true }}\n                    onFinish={(store) =>\n                        onFinish({ email: store.email, password: store.password, remember: store.remember })\n                    }\n                >\n                    <Form.Item\n                        label=\"E-mail\"\n                        name=\"email\"\n                        rules={[validEmail, { required: true, message: 'Please input your email!' }]}\n                    >\n                        <Input />\n                    </Form.Item>\n\n                    <Form.Item\n                        label=\"Password\"\n                        name=\"password\"\n                        rules={[{ required: true, message: 'Please input your password!' }]}\n                    >\n                        <Input.Password />\n                    </Form.Item>\n\n                    <Form.Item name=\"remember\" valuePropName=\"checked\">\n                        <Checkbox>Remember me</Checkbox>\n                    </Form.Item>\n\n                    <Form.Item>\n                        <Button type=\"primary\" htmlType=\"submit\">\n                            Submit\n                        </Button>\n                    </Form.Item>\n                </Form>\n            </Card>\n        </div>\n    );\n};\nexport default Login;\n","import React, { FC, useState } from 'react';\nimport { Form, Input } from 'antd';\n\nconst layout = {\n    labelCol: { span: 8 },\n    wrapperCol: { span: 16 },\n};\ninterface IProps {\n    style: React.CSSProperties;\n}\n\nconst SongsForm: FC<IProps> = ({ style }) => {\n    const [keyword, setkeyword] = useState('');\n    const search = (e: React.KeyboardEvent<HTMLInputElement>) => {\n        setkeyword(e.currentTarget.value);\n    };\n    return (\n        <Form style={style} {...layout} name=\"basic\" initialValues={{ remember: true }}>\n            <Form.Item label=\"\" name=\"keyword\">\n                <Input\n                    placeholder=\"please input something~\"\n                    onPressEnter={(event: React.KeyboardEvent<HTMLInputElement>) => search(event)}\n                />\n            </Form.Item>\n        </Form>\n    );\n};\nexport default SongsForm;\n","import React from 'react';\nimport { Route, RouteComponentProps, Redirect, Switch } from 'react-router-dom';\nimport { useAuth } from './view/common/Auth';\nimport HeaderLayout from '../src/view/common/header/Header';\n\ninterface IProps {\n    Component: React.FC<RouteComponentProps>;\n    path: string;\n    exact?: boolean;\n}\nconst PrivateRoute = ({ Component, ...rest }: IProps) => {\n    const { authTokens } = useAuth();\n    return (\n        <Switch>\n            <Route\n            {...rest}\n            render={(props) =>\n                authTokens ? (\n                    <HeaderLayout>\n                        <Component {...props} />\n                    </HeaderLayout>\n                ) : (\n                    <Redirect to={{ pathname: '/login', state: { referer: props.location } }} />\n                )\n            }\n        />\n        </Switch>\n    );\n};\n\nexport default PrivateRoute;\n","import Axios from 'axios';\nimport { notification } from 'antd';\n\nconst instance = Axios.create({\n    baseURL: '/api',\n    withCredentials: false,\n});\n\ninstance.interceptors.request.use(\n    (config) => {\n        return config;\n    },\n    (err) => {\n        return Promise.reject(err);\n    }\n);\n\ninstance.interceptors.response.use(\n    (response) => {\n        if (response.status === 200) {\n            return response.data.data;\n        } else {\n            notification.error({ message: response.statusText });\n            return Promise.reject(response.data);\n        }\n    },\n    (err) => {\n        return Promise.reject(err);\n    }\n);\n\nexport default instance;\n","import service from './index';\nimport { ISong } from '../redux/modules/songs';\n\n/**\n * fetch song list\n * @param provider\n * @param keyword\n */\nexport const getSongsList = async (\n    provider: string,\n    keyword: string,\n    page: number,\n): Promise<{ songs: ISong[]; totalCount: number }> => {\n    return await service.get('/search', {\n        params: {\n            provider,\n            keyword,\n            page,\n        },\n    });\n};\n\n/**\n * play song\n * @param platform\n * @param id\n */\nexport const playSong = async (platform: string, id: string): Promise<{ songSource: string }> => {\n    return await service.get(`/song_source/${platform}/${id}`);\n};\n","import React, { FC, useState, useEffect } from 'react';\nimport { getSongsList, playSong } from '../../../service/songs';\nimport { Table } from 'antd';\nimport { songsColumn } from './columns';\nimport ReactAudioPlayer from 'react-audio-player';\nimport { ISong } from '../../../redux/modules/songs';\n\nconst SongsList: FC = () => {\n    const [list, setlist] = useState<ISong[]>([]);\n    const [total, settotal] = useState(0);\n    const [platform, setplatform] = useState('');\n    const [id, setid] = useState('');\n    const [currentSongUrl, setcurrentSongUrl] = useState('');\n    const [meted, setmeted] = useState(false);\n\n    const initList = async (page: number = 1) => {\n        const { songs, totalCount } = await getSongsList('netease', 'sia', page);\n        setlist(songs);\n        settotal(totalCount);\n    };\n    useEffect(() => {\n        initList();\n    }, []);\n\n    const play = async (platform: string, id: string) => {\n        const data = await playSong(platform, id);\n        setcurrentSongUrl(data.songSource);\n    };\n\n    const columns = songsColumn(play);\n\n    const changeSize = (page: number) => {\n        initList(page);\n    };\n\n    return (\n        <div>\n            <Table\n                columns={columns}\n                dataSource={list}\n                pagination={{ total, onChange: changeSize, showSizeChanger: false }}\n            />\n            <ReactAudioPlayer src={currentSongUrl} autoPlay controls muted={meted} />\n        </div>\n    );\n};\nexport default SongsList;\n","import React from 'react';\nimport { Tag } from 'antd';\nimport { ColumnsType } from 'antd/es/table';\nimport { PlayCircleOutlined, DownloadOutlined } from '@ant-design/icons';\nimport { ISong } from '../../../redux/modules/songs';\n\nexport const songsColumn: (play: (platform: string, id: string) => void) => ColumnsType<ISong> = (play) => {\n    return [\n        {\n            title: 'song-name',\n            dataIndex: 'name',\n            key: 'name',\n            render: (text: string, record: ISong) => <a href={record.link} target=\"_blank\">{text}</a>,\n        },\n        {\n            title: 'singer-name',\n            dataIndex: 'artists',\n            key: 'artists',\n            render: (_text: string, record: ISong) => {\n                return record.artists.map((item) => {\n                    const color = record.artists.length > 5 ? 'geekblue' : 'green';\n                    return (\n                        <Tag color={color} key={item.name}>\n                            <a href={item.link} target=\"_blank\">{item.name}</a>\n                        </Tag>\n                    );\n                });\n            },\n        },\n        {\n            title: 'album',\n            dataIndex: 'album',\n            key: 'album',\n            render: (text: string, record: ISong) => (\n                <Tag key={record.album.name}>\n                    <a href={record.album.link} target=\"_blank\">{record.album.name}</a>\n                </Tag>\n            ),\n        },\n        {\n            title: 'copyright',\n            dataIndex: 'copyright',\n            key: 'copyright',\n            render: (text: boolean) => (text ? 'yes' : 'no'),\n        },\n        {\n            title: 'operation',\n            dataIndex: 'operation',\n            key: 'operation',\n            render: (text: string, record: ISong) => (\n                <div style={{ display: 'flex', justifyContent: 'space-around', fontSize: '20px' }}>\n                    <PlayCircleOutlined onClick={() => play(record.platform, record.originalId)} />\n                    <DownloadOutlined />\n                </div>\n            ),\n        },\n    ];\n};\n","import React, { FC } from 'react';\n\nconst Home: FC = () => {\n    return <div>home page</div>;\n};\n\nexport default Home;\n","import React from 'react';\n\nconst SignUp = () => {\n    return <div>sign up</div>;\n};\nexport default SignUp;\n","import React, { useState } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport Login from '../src/view/login/Login';\nimport { AuthContext } from './view/common/Auth';\nimport PrivateRoute from './PrivateRoute';\nimport SongsList from '../src/view/pages/songs-list/Songs-List';\nimport Home from './view/home/Home';\nimport SignUp from './view/sign-up/sign-up';\n\nconst App = () => {\n    const existingTokens = JSON.parse(localStorage.getItem('tokens')!);\n    const [authTokens, setAuthTokens] = useState(existingTokens);\n\n    const setTokens = (data: object) => {\n        localStorage.setItem('tokens', JSON.stringify(data));\n        setAuthTokens(data);\n    };\n    return (\n        <AuthContext.Provider value={{ authTokens, setAuthTokens: setTokens }}>\n            <Router>\n                <Switch>\n                    <Route exact path=\"/login\" component={Login} />\n                    <Route exact path=\"/signUp\" component={SignUp} />\n                    <PrivateRoute path=\"/\" Component={Home} />\n                </Switch>\n                <PrivateRoute path=\"/list\" Component={SongsList} />\n            </Router>\n        </AuthContext.Provider>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { typedAction } from '../helpers';\n\nexport interface ISong {\n    originalId: string;\n    name: string;\n    link: string;\n    mvLink: string;\n    artists: IAlbum[];\n    album: IAlbum;\n    hasCopyright: boolean;\n    fee: number;\n    platform: string;\n}\n\nexport interface IAlbum {\n    name: string;\n    link: string;\n}\n\nexport interface ISongState {\n    songsList: ISong[];\n    loading: boolean;\n}\n\nconst initState: ISongState = {\n    songsList: [],\n    loading: false,\n};\n\ninterface ISongQuery {\n    provider: string;\n    keyword: string;\n    page: number;\n}\n\nconst getSongsList = (query: ISongQuery) => {\n    return typedAction('songs/GET_SONGS_LIST', query);\n};\n\ntype SongAction = ReturnType<typeof getSongsList>;\nexport const songReducer = (state = initState, action: SongAction) => {\n    switch (action.type) {\n        case 'songs/GET_SONGS_LIST':\n            return {\n                ...state,\n                songsList: [...state.songsList],\n            };\n        default:\n            return state;\n    }\n};\n","import { typedAction } from '../helpers';\n\ninterface IUserState {\n    username: string;\n    email: string;\n    password: string;\n}\nconst initState: IUserState = {\n    username: 'mannix lei',\n    email: 'mannix@gmail.com',\n    password: '888888',\n};\nexport const login = (email: string, password: string) => {\n    console.log('====================================')\n    console.log(email, password)\n    console.log('====================================')\n    return typedAction('user/LOGIN', { email, password });\n};\n\nexport const logout = () => {\n    return typedAction('user/LOGOUT');\n};\n\ntype UserAction = ReturnType<typeof login | typeof logout>;\n\nexport const userReducer = (state = initState, action: UserAction): IUserState => {\n    switch (action.type) {\n        case 'user/LOGIN':\n            return { username: '', email: action.payload.email, password: action.payload.password };\n        case 'user/LOGOUT':\n            return { username: '', email: '', password: '' };\n        default:\n            return state;\n    }\n};\n","import { songReducer } from './modules/songs';\nimport { combineReducers } from 'redux';\nimport { userReducer } from './modules/user';\n\nexport const rootReducer = combineReducers({ user: userReducer, song: songReducer });\nexport type RootState = ReturnType<typeof rootReducer>;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.module.scss';\nimport 'antd/dist/antd.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, applyMiddleware } from 'redux';\nimport { rootReducer } from './redux';\nimport thunk from 'redux-thunk';\nimport { Provider } from 'react-redux';\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nReactDOM.render(\n    <Provider store={store}>\n        <React.StrictMode>\n            <App />\n        </React.StrictMode>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}